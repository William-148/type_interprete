/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,12],$V1=[1,4],$V2=[1,5],$V3=[1,7],$V4=[1,8],$V5=[1,9],$V6=[1,24],$V7=[1,27],$V8=[1,14],$V9=[1,15],$Va=[1,17],$Vb=[1,18],$Vc=[1,19],$Vd=[1,20],$Ve=[1,21],$Vf=[1,22],$Vg=[1,23],$Vh=[1,25],$Vi=[1,26],$Vj=[1,2,6,7,9,11,14,22,29,37,40,59,60,61,62,63,64,65,66,67],$Vk=[1,31],$Vl=[1,34],$Vm=[1,43],$Vn=[1,44],$Vo=[1,37],$Vp=[1,38],$Vq=[1,39],$Vr=[1,40],$Vs=[1,41],$Vt=[1,42],$Vu=[1,45],$Vv=[1,46],$Vw=[1,47],$Vx=[1,48],$Vy=[1,49],$Vz=[1,50],$VA=[1,51],$VB=[1,52],$VC=[13,26,27,30,31,34,42,45,46,47,48,49,50,51,52,53,54,55,56,57,58],$VD=[13,31],$VE=[30,31],$VF=[1,91],$VG=[1,92],$VH=[1,93],$VI=[1,94],$VJ=[1,90],$VK=[13,26,27,30,31,34,42,45,46,51,52,53,54,55,56,57,58],$VL=[13,26,27,30,31,34,42,45,46,47,48,50,51,52,53,54,55,56,57,58],$VM=[13,26,27,30,31,34,42,51,52,53,54,55,56,57,58],$VN=[13,30,31,34,42,53,54,55,56,57,58],$VO=[13,27,31,34],$VP=[1,105],$VQ=[13,27,29,31,34],$VR=[31,42];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"BODY_LIST":4,"BODY":5,"TYPE":6,"FUNCION":7,"SENTENCE":8,"EOF":9,"SENTENCES_LIST":10,"let":11,"DECLARATION_LIST":12,";":13,"const":14,"CONST_LIST":15,"ASSIGNMENT":16,"CONSOLE":17,"PRIMITIVE":18,"string":19,"boolean":20,"number":21,"identificador":22,"DATA_TYPE":23,"BRACKET_LIST":24,"Array":25,"<":26,">":27,"BRACKET":28,"[":29,"]":30,",":31,"DECLARATION":32,":":33,"=":34,"EXPRESION":35,"CONST_DECLARATION":36,"console":37,".":38,"log":39,"(":40,"PASSING_PARAMETERS":41,")":42,"ARRAY":43,"ELEMENT_LIST":44,"+":45,"-":46,"*":47,"/":48,"**":49,"%":50,"<=":51,">=":52,"===":53,"==":54,"!=":55,"!==":56,"||":57,"&&":58,"numero":59,"decimal":60,"true":61,"false":62,"cadena_d":63,"cadena_s":64,"cadena_t":65,"null":66,"undefined":67,"$accept":0,"$end":1},
terminals_: {2:"error",6:"TYPE",7:"FUNCION",9:"EOF",11:"let",13:";",14:"const",19:"string",20:"boolean",21:"number",22:"identificador",25:"Array",26:"<",27:">",29:"[",30:"]",31:",",33:":",34:"=",37:"console",38:".",39:"log",40:"(",42:")",45:"+",46:"-",47:"*",48:"/",49:"**",50:"%",51:"<=",52:">=",53:"===",54:"==",55:"!=",56:"!==",57:"||",58:"&&",59:"numero",60:"decimal",61:"true",62:"false",63:"cadena_d",64:"cadena_s",65:"cadena_t",66:"null",67:"undefined"},
productions_: [0,[3,1],[4,2],[4,1],[5,1],[5,1],[5,1],[5,1],[10,2],[10,1],[8,3],[8,3],[8,1],[8,1],[8,1],[18,1],[18,1],[18,1],[18,1],[23,1],[23,2],[23,4],[24,2],[24,1],[28,2],[12,3],[12,1],[32,5],[32,3],[32,3],[32,1],[15,3],[15,1],[36,5],[36,3],[16,4],[16,2],[17,7],[41,3],[41,1],[43,3],[43,2],[44,3],[44,1],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,1],[35,1],[35,1],[35,1],[35,1],[35,1],[35,1],[35,1],[35,1],[35,1],[35,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
  let errorReturn = errorList;
                                       errorList = [];
                                       return {tree: $$[$0], errors: errorReturn};
                                    
break;
case 2: case 8:
 $$[$0-1].add($$[$0]); this.$ = $$[$0-1]; 
break;
case 3:
  if($$[$0].isSentence) this.$ = $$[$0]; 
                                       else {  this.$ = new Sentence(); this.$.add($$[$0]); }
                                    
break;
case 4: case 5: case 6: case 12: case 13: case 19: case 23: case 61:
 this.$ = $$[$0]; 
break;
case 7:
 this.$ = new NodeBase('EOF'); 
break;
case 9: case 39:
 this.$ = new Sentence(); this.$.add($$[$0]); 
break;
case 10: case 11:
 this.$ = $$[$0-1].getDeclarations(); 
break;
case 14:
 errorList.push(new AnalysisError('Token "'+yytext+'" no esperado.', ErrorType.SINTACTICO, new Position(this._$.first_line, this._$.first_column)));
                                      this.$ = new NodeBase('Error', NodeType.ERROR);
                                    
break;
case 15:
 this.$ = new DefineType('string', NodeType.DT_STRING); this.$.setRowCol(this._$.first_line, this._$.first_column);
break;
case 16:
 this.$ = new DefineType('boolean', NodeType.DT_BOOLEAN); this.$.setRowCol(this._$.first_line, this._$.first_column);
break;
case 17:
 this.$ = new DefineType('number', NodeType.DT_NUMBER); this.$.setRowCol(this._$.first_line, this._$.first_column);
break;
case 18:
 this.$ = new DefineType($$[$0], NodeType.DT_IDENTIFIER); this.$.setRowCol(this._$.first_line, this._$.first_column);
break;
case 20:
 this.$ = $$[$0-1]; this.$.toArray($$[$0]); 
break;
case 21:
 this.$ = $$[$0-1]; this.$.toArray(1); 
break;
case 22:
 this.$ = $$[$0-1] + $$[$0]; 
break;
case 24:
 this.$ = 1; 
break;
case 25: case 31: case 38:
 this.$ = $$[$0-2]; this.$.add($$[$0]); 
break;
case 26: case 32:
 this.$ = new DeclarationList(); this.$.add($$[$0]); 
break;
case 27:
 this.$ = new Declaration($$[$0-4], $$[$0], $$[$0-2]);
                                                          this.$.setRowCol(this._$.first_line, this._$.first_column+4);
                                                        
break;
case 28:
 this.$ = new Declaration($$[$0-2], $$[$0], null);
                                                          this.$.setRowCol(this._$.first_line, this._$.first_column+4);
                                                        
break;
case 29:
 this.$ = new Declaration($$[$0-2], null, $$[$0]);
                                                          this.$.setRowCol(this._$.first_line, this._$.first_column+4);
                                                        
break;
case 30:
 this.$ = new Declaration($$[$0]);
                                                          this.$.setRowCol(this._$.first_line, this._$.first_column+4);
                                                        
break;
case 33:
 this.$ = new Declaration($$[$0-4], $$[$0], $$[$0-2], true);
                                                          this.$.setRowCol(this._$.first_line, this._$.first_column+6);
                                                        
break;
case 34:
 this.$ = new Declaration($$[$0-2], $$[$0], null, true);
                                                          this.$.setRowCol(this._$.first_line, this._$.first_column+6);
                                                        
break;
case 35:
 this.$ = new Assign($$[$0-3], $$[$0-1]); 
break;
case 36:
   if($$[$0-1].type === NodeType.INS_CALL_FUNCTION) this.$ = $$[$0-1];
                                                            else this.$ = new SingleLine($$[$0-1]);
                                                        
break;
case 37:
 this.$ = new CallFunction('console.log', $$[$0-2]); this.$.setRowCol(this._$.first_line, this._$.first_column); 
break;
case 40:
 this.$ = new ArrayStructure($$[$0-1]); this.$.setRowCol(this._$.first_line, this._$.first_column); 
break;
case 41:
 this.$ = new ArrayStructure([]); this.$.setRowCol(this._$.first_line, this._$.first_column); 
break;
case 42:
 this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 43:
 this.$ = [ $$[$0] ]; 
break;
case 44:
 this.$ = $$[$0-1]; 
break;
case 45: case 46: case 47: case 48: case 49: case 50:
 this.$ = new BinaryOperation($$[$0-2], $$[$0], $$[$0-1]); this.$.setRowCol(this._$.first_line, this._$.first_column);
break;
case 51: case 52: case 53: case 54: case 55: case 56: case 57: case 58:
 this.$ = new RelationalOperation($$[$0-2], $$[$0], $$[$0-1]); 
break;
case 59: case 60:
 this.$ = new LogicOperation($$[$0-2], $$[$0], $$[$0-1]); 
break;
case 62: case 63:
 this.$ = new Number($$[$0]); this.$.setRowCol(this._$.first_line, this._$.first_column);
break;
case 64:
 this.$ = new Bool('true'); this.$.setRowCol(this._$.first_line, this._$.first_column);
break;
case 65:
 this.$ = new Bool('false'); this.$.setRowCol(this._$.first_line, this._$.first_column);
break;
case 66: case 67: case 68:
 this.$ = new String($$[$0]); this.$.setRowCol(this._$.first_line, this._$.first_column);
break;
case 69:
 this.$ = new Identifier($$[$0]); this.$.setRowCol(this._$.first_line, this._$.first_column);
break;
case 70: case 71:
 this.$ = new Null(); this.$.setRowCol(this._$.first_line, this._$.first_column);
break;
}
},
table: [{2:$V0,3:1,4:2,5:3,6:$V1,7:$V2,8:6,9:$V3,11:$V4,14:$V5,16:10,17:11,22:$V6,29:$V7,35:13,37:$V8,40:$V9,43:16,59:$Va,60:$Vb,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,67:$Vi},{1:[3]},{1:[2,1],2:$V0,5:28,6:$V1,7:$V2,8:6,9:$V3,11:$V4,14:$V5,16:10,17:11,22:$V6,29:$V7,35:13,37:$V8,40:$V9,43:16,59:$Va,60:$Vb,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,67:$Vi},o($Vj,[2,3]),o($Vj,[2,4]),o($Vj,[2,5]),o($Vj,[2,6]),o($Vj,[2,7]),{12:29,22:$Vk,32:30},{15:32,22:$Vl,36:33},o($Vj,[2,12]),o($Vj,[2,13]),o($Vj,[2,14]),{13:[1,36],26:$Vm,27:$Vn,34:[1,35],45:$Vo,46:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,51:$Vu,52:$Vv,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA,58:$VB},{38:[1,53]},{22:$V6,29:$V7,35:54,40:$V9,43:16,59:$Va,60:$Vb,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,67:$Vi},o($VC,[2,61]),o($VC,[2,62]),o($VC,[2,63]),o($VC,[2,64]),o($VC,[2,65]),o($VC,[2,66]),o($VC,[2,67]),o($VC,[2,68]),o($VC,[2,69]),o($VC,[2,70]),o($VC,[2,71]),{22:$V6,29:$V7,30:[1,56],35:57,40:$V9,43:16,44:55,59:$Va,60:$Vb,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,67:$Vi},o($Vj,[2,2]),{13:[1,58],31:[1,59]},o($VD,[2,26]),o($VD,[2,30],{33:[1,60],34:[1,61]}),{13:[1,62],31:[1,63]},o($VD,[2,32]),{33:[1,64],34:[1,65]},{22:$V6,29:$V7,35:66,40:$V9,43:16,59:$Va,60:$Vb,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,67:$Vi},o($Vj,[2,36]),{22:$V6,29:$V7,35:67,40:$V9,43:16,59:$Va,60:$Vb,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,67:$Vi},{22:$V6,29:$V7,35:68,40:$V9,43:16,59:$Va,60:$Vb,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,67:$Vi},{22:$V6,29:$V7,35:69,40:$V9,43:16,59:$Va,60:$Vb,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,67:$Vi},{22:$V6,29:$V7,35:70,40:$V9,43:16,59:$Va,60:$Vb,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,67:$Vi},{22:$V6,29:$V7,35:71,40:$V9,43:16,59:$Va,60:$Vb,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,67:$Vi},{22:$V6,29:$V7,35:72,40:$V9,43:16,59:$Va,60:$Vb,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,67:$Vi},{22:$V6,29:$V7,35:73,40:$V9,43:16,59:$Va,60:$Vb,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,67:$Vi},{22:$V6,29:$V7,35:74,40:$V9,43:16,59:$Va,60:$Vb,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,67:$Vi},{22:$V6,29:$V7,35:75,40:$V9,43:16,59:$Va,60:$Vb,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,67:$Vi},{22:$V6,29:$V7,35:76,40:$V9,43:16,59:$Va,60:$Vb,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,67:$Vi},{22:$V6,29:$V7,35:77,40:$V9,43:16,59:$Va,60:$Vb,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,67:$Vi},{22:$V6,29:$V7,35:78,40:$V9,43:16,59:$Va,60:$Vb,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,67:$Vi},{22:$V6,29:$V7,35:79,40:$V9,43:16,59:$Va,60:$Vb,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,67:$Vi},{22:$V6,29:$V7,35:80,40:$V9,43:16,59:$Va,60:$Vb,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,67:$Vi},{22:$V6,29:$V7,35:81,40:$V9,43:16,59:$Va,60:$Vb,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,67:$Vi},{22:$V6,29:$V7,35:82,40:$V9,43:16,59:$Va,60:$Vb,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,67:$Vi},{39:[1,83]},{26:$Vm,27:$Vn,42:[1,84],45:$Vo,46:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,51:$Vu,52:$Vv,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA,58:$VB},{30:[1,85],31:[1,86]},o($VC,[2,41]),o($VE,[2,43],{26:$Vm,27:$Vn,45:$Vo,46:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,51:$Vu,52:$Vv,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA,58:$VB}),o($Vj,[2,10]),{22:$Vk,32:87},{18:89,19:$VF,20:$VG,21:$VH,22:$VI,23:88,25:$VJ},{22:$V6,29:$V7,35:95,40:$V9,43:16,59:$Va,60:$Vb,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,67:$Vi},o($Vj,[2,11]),{22:$Vl,36:96},{18:89,19:$VF,20:$VG,21:$VH,22:$VI,23:97,25:$VJ},{22:$V6,29:$V7,35:98,40:$V9,43:16,59:$Va,60:$Vb,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,67:$Vi},{13:[1,99],26:$Vm,27:$Vn,45:$Vo,46:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,51:$Vu,52:$Vv,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA,58:$VB},o($VK,[2,45],{47:$Vq,48:$Vr,49:$Vs,50:$Vt}),o($VK,[2,46],{47:$Vq,48:$Vr,49:$Vs,50:$Vt}),o($VL,[2,47],{49:$Vs}),o($VL,[2,48],{49:$Vs}),o($VC,[2,49]),o($VL,[2,50],{49:$Vs}),o($VM,[2,51],{45:$Vo,46:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt}),o($VM,[2,52],{45:$Vo,46:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt}),o($VM,[2,53],{45:$Vo,46:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt}),o($VM,[2,54],{45:$Vo,46:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt}),o($VN,[2,55],{26:$Vm,27:$Vn,45:$Vo,46:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,51:$Vu,52:$Vv}),o($VN,[2,56],{26:$Vm,27:$Vn,45:$Vo,46:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,51:$Vu,52:$Vv}),o($VN,[2,57],{26:$Vm,27:$Vn,45:$Vo,46:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,51:$Vu,52:$Vv}),o($VN,[2,58],{26:$Vm,27:$Vn,45:$Vo,46:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,51:$Vu,52:$Vv}),o([13,30,31,34,42,57],[2,59],{26:$Vm,27:$Vn,45:$Vo,46:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,51:$Vu,52:$Vv,53:$Vw,54:$Vx,55:$Vy,56:$Vz,58:$VB}),o([13,30,31,34,42,57,58],[2,60],{26:$Vm,27:$Vn,45:$Vo,46:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,51:$Vu,52:$Vv,53:$Vw,54:$Vx,55:$Vy,56:$Vz}),{40:[1,100]},o($VC,[2,44]),o($VC,[2,40]),{22:$V6,29:$V7,35:101,40:$V9,43:16,59:$Va,60:$Vb,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,67:$Vi},o($VD,[2,25]),o($VD,[2,29],{34:[1,102]}),o($VO,[2,19],{24:103,28:104,29:$VP}),{26:[1,106]},o($VQ,[2,15]),o($VQ,[2,16]),o($VQ,[2,17]),o($VQ,[2,18]),o($VD,[2,28],{26:$Vm,27:$Vn,45:$Vo,46:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,51:$Vu,52:$Vv,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA,58:$VB}),o($VD,[2,31]),{34:[1,107]},o($VD,[2,34],{26:$Vm,27:$Vn,45:$Vo,46:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,51:$Vu,52:$Vv,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA,58:$VB}),o($Vj,[2,35]),{22:$V6,29:$V7,35:109,40:$V9,41:108,43:16,59:$Va,60:$Vb,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,67:$Vi},o($VE,[2,42],{26:$Vm,27:$Vn,45:$Vo,46:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,51:$Vu,52:$Vv,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA,58:$VB}),{22:$V6,29:$V7,35:110,40:$V9,43:16,59:$Va,60:$Vb,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,67:$Vi},o($VO,[2,20],{28:111,29:$VP}),o($VQ,[2,23]),{30:[1,112]},{18:89,19:$VF,20:$VG,21:$VH,22:$VI,23:113,25:$VJ},{22:$V6,29:$V7,35:114,40:$V9,43:16,59:$Va,60:$Vb,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,67:$Vi},{31:[1,116],42:[1,115]},o($VR,[2,39],{26:$Vm,27:$Vn,45:$Vo,46:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,51:$Vu,52:$Vv,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA,58:$VB}),o($VD,[2,27],{26:$Vm,27:$Vn,45:$Vo,46:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,51:$Vu,52:$Vv,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA,58:$VB}),o($VQ,[2,22]),o($VQ,[2,24]),{27:[1,117]},o($VD,[2,33],{26:$Vm,27:$Vn,45:$Vo,46:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,51:$Vu,52:$Vv,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA,58:$VB}),{13:[1,118]},{22:$V6,29:$V7,35:119,40:$V9,43:16,59:$Va,60:$Vb,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,67:$Vi},o($VO,[2,21]),o($Vj,[2,37]),o($VR,[2,38],{26:$Vm,27:$Vn,45:$Vo,46:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,51:$Vu,52:$Vv,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA,58:$VB})],
defaultActions: {},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const { NodeBase } = require('./models/Node');
    const { Position } = require('./models/Position');
    const { NodeType } = require('./models/NodeType');
    const { AnalysisError, ErrorType } = require('./models/Error');
    const { Null, Number, String, Bool, Identifier } = require('./expressions/Primitive');
    const { BinaryOperation } = require('./expressions/BinaryOperation');
    const { RelationalOperation } = require('./expressions/RelationalOperation');
    const { LogicOperation } = require('./expressions/LogicOperation');
    const { DefineType } = require('./dataType/DefineType');
    const { Sentence } = require('./instructions/Sentence');
    const { Declaration, DeclarationList } = require('./instructions/Declaration');
    const { CallFunction } = require('./instructions/CallFunction');
    const { Assign } = require('./instructions/Assign');
    const { SingleLine } = require('./instructions/SingleLine');
    const { ArrayStructure } = require('./dataStructure/Array');
    let errorList = [];
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* omitir espacios en blanco */
break;
case 1:/* omitir comentarios */
break;
case 2:return '{'
break;
case 3:return '}'
break;
case 4:return 29
break;
case 5:return 30
break;
case 6:return 40
break;
case 7:return 42
break;
case 8:return 31
break;
case 9:return 38
break;
case 10:return 33
break;
case 11:return 13
break;
case 12:return '?'
break;
case 13:return 11
break;
case 14:return 14
break;
case 15:return 19
break;
case 16:return 20
break;
case 17:return 'void'
break;
case 18:return 21
break;
case 19:return 'type'
break;
case 20:return 25
break;
case 21:return 61
break;
case 22:return 62
break;
case 23:return 'new'
break;
case 24:return 66
break;
case 25:return 67
break;
case 26:return 'if'
break;
case 27:return 'else'
break;
case 28:return 'switch'
break;
case 29:return 'case'
break;
case 30:return 'default'
break;
case 31:return 'while'
break;
case 32:return 'do'
break;
case 33:return 'for'
break;
case 34:return 'in'
break;
case 35:return 'of'
break;
case 36:return 'break'
break;
case 37:return 'continue'
break;
case 38:return 'function'
break;
case 39:return 'return'
break;
case 40:return 37
break;
case 41:return 39
break;
case 42:return 51
break;
case 43:return 26
break;
case 44:return 53
break;
case 45:return 54
break;
case 46:return 52
break;
case 47:return 27
break;
case 48:return 56
break;
case 49:return 55
break;
case 50:return 57
break;
case 51:return 58
break;
case 52:return '!'
break;
case 53:return 34
break;
case 54:return '-='
break;
case 55:return '+='
break;
case 56:return '++'
break;
case 57:return 45
break;
case 58:return '--'
break;
case 59:return 46
break;
case 60:return 48
break;
case 61:return 49
break;
case 62:return 47
break;
case 63:return 50
break;
case 64: yy_.yytext = yy_.yytext.toLowerCase(); return 22;
break;
case 65:return 60
break;
case 66:return 59
break;
case 67: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); 
                        yy_.yytext = yy_.yytext.replace(new RegExp(/\\n/, 'g'), '\n');
                        yy_.yytext = yy_.yytext.replace(new RegExp(/\\t/, 'g'), '\t');
                        return 63; 
break;
case 68: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); 
                        yy_.yytext = yy_.yytext.replace(new RegExp(/\\n/, 'g'), '\n');
                        yy_.yytext = yy_.yytext.replace(new RegExp(/\\t/, 'g'), '\t');
                        return 64; 
break;
case 69: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); 
                        yy_.yytext = yy_.yytext.replace(new RegExp(/\\n/, 'g'), '\n');
                        yy_.yytext = yy_.yytext.replace(new RegExp(/\\t/, 'g'), '\t');
                        return 65; 
break;
case 70:return 9; // Token fin de archivo
break;
case 71: errorList.push(new AnalysisError('Carácter desconocido "'+yy_.yytext+'".', ErrorType.LEXICO, new Position(yy_.yylloc.first_line, yy_.yylloc.first_column)));
                        console.error('Error Lexico: ' + yy_.yytext + ' en la linea ' + yy_.yylloc.first_line + ' y columna ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:\s+)/i,/^(?:((\/\*[\s\S]*?\*\/|\/\/.*)))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\()/i,/^(?:\))/i,/^(?:,)/i,/^(?:\.)/i,/^(?::)/i,/^(?:;)/i,/^(?:\?)/i,/^(?:let\b)/i,/^(?:const\b)/i,/^(?:string\b)/i,/^(?:boolean\b)/i,/^(?:void\b)/i,/^(?:number\b)/i,/^(?:type\b)/i,/^(?:Array\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:new\b)/i,/^(?:null\b)/i,/^(?:undefined\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:for\b)/i,/^(?:in\b)/i,/^(?:of\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:function\b)/i,/^(?:return\b)/i,/^(?:console\b)/i,/^(?:log\b)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:===)/i,/^(?:==)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:!==)/i,/^(?:!=)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:=)/i,/^(?:-=)/i,/^(?:\+=)/i,/^(?:\+\+)/i,/^(?:\+)/i,/^(?:--)/i,/^(?:-)/i,/^(?:\/)/i,/^(?:\*\*)/i,/^(?:\*)/i,/^(?:%)/i,/^(?:((([a-zA-Z_])[a-zA-Z0-9_]*)))/i,/^(?:(((([0-9]+))(\.(([0-9]+))))))/i,/^(?:(((([0-9]+)))))/i,/^(?:(((("))((?:\\(("))|(?:(?!(("))).))*)((")))))/i,/^(?:(((('))((?:\\(('))|(?:(?!(('))).))*)((')))))/i,/^(?:((((`))((?:\\((`))|(?:(?!((`))).))*)((`)))))/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}