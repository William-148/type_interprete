/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,18],$V1=[1,4],$V2=[1,16],$V3=[1,17],$V4=[1,35],$V5=[1,38],$V6=[1,19],$V7=[1,31],$V8=[1,39],$V9=[1,20],$Va=[1,21],$Vb=[1,33],$Vc=[1,32],$Vd=[1,34],$Ve=[1,40],$Vf=[1,41],$Vg=[1,42],$Vh=[1,43],$Vi=[1,44],$Vj=[1,45],$Vk=[1,46],$Vl=[1,47],$Vm=[1,48],$Vn=[1,49],$Vo=[1,23],$Vp=[1,24],$Vq=[1,25],$Vr=[1,26],$Vs=[1,27],$Vt=[1,28],$Vu=[1,30],$Vv=[1,29],$Vw=[2,6,19,20,26,32,39,40,43,45,47,51,58,59,69,80,81,82,83,84,85,86,87,88,89,93,97,100,101,102,107,108,109,112,113],$Vx=[1,52],$Vy=[1,66],$Vz=[1,67],$VA=[1,60],$VB=[1,61],$VC=[1,62],$VD=[1,63],$VE=[1,64],$VF=[1,65],$VG=[1,68],$VH=[1,69],$VI=[1,70],$VJ=[1,71],$VK=[1,72],$VL=[1,73],$VM=[1,74],$VN=[1,75],$VO=[1,76],$VP=[21,30,31,33,35,42,45,46,48,58,59,60,61,62,63,64,65,66,67,68,70,71,76,77],$VQ=[1,101],$VR=[2,96],$VS=[1,105],$VT=[2,19,20,26,32,39,40,43,45,47,51,58,59,69,80,81,82,83,84,85,86,87,88,89,93,97,102,107,108,109,112,113],$VU=[2,36],$VV=[21,30,31,33,35,42,45,46,48,58,59,64,65,66,67,68,70,71,77],$VW=[2,49],$VX=[2,103],$VY=[1,146],$VZ=[26,42,46],$V_=[2,42],$V$=[1,153],$V01=[1,157],$V11=[1,158],$V21=[1,159],$V31=[1,160],$V41=[1,156],$V51=[21,30,31,33,35,42,45,46,48,58,59,60,61,63,64,65,66,67,68,70,71,77],$V61=[21,30,31,33,35,42,45,46,48,58,59,60,61,62,63,64,65,66,67,68,70,71,77],$V71=[21,30,31,33,35,42,45,46,48,64,65,66,67,68,70,71,77],$V81=[21,33,35,42,45,46,48,66,67,68,70,71,77],$V91=[21,33,35,42,45,46,48,70,71],$Va1=[2,51],$Vb1=[1,178],$Vc1=[21,26,31,32,42,43,45,46,48],$Vd1=[2,19,20,26,32,39,40,43,45,47,51,58,59,69,80,81,82,83,84,85,86,87,88,89,93,97,100,101,102,107,108,109,112,113],$Ve1=[1,205],$Vf1=[2,136],$Vg1=[21,30,31,32,33,35,42,45,46,48,58,59,60,61,62,63,64,65,66,67,68,70,71,76,77],$Vh1=[21,26,31,42,43,45,46,48],$Vi1=[2,44],$Vj1=[1,223],$Vk1=[45,101],$Vl1=[2,119],$Vm1=[1,226],$Vn1=[2,114],$Vo1=[1,271];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"BODY_FILE":4,"SENTENCIA":5,"EOF":6,"FUNCION":7,"DECLARACION":8,"FIN":9,"ASIGNACION":10,"IF":11,"SWITCH":12,"FOR":13,"WHILE":14,"DO_WHILE":15,"TYPE":16,"CONSOLE":17,"RETURN":18,"break":19,"continue":20,";":21,"PRIMITIVO":22,"string":23,"boolean":24,"number":25,"identificador":26,"DATO":27,"CORCHETES":28,"Array":29,"<":30,">":31,"[":32,"]":33,"TIPO_DATO":34,":":35,"TIPO_RETORNO":36,"TIPO_RETORNO_":37,"void":38,"function":39,"(":40,"PARAMETROS":41,")":42,"{":43,"BODY":44,"}":45,",":46,"let":47,"=":48,"EXPRESION":49,"OTRA_DECLARACION":50,"const":51,"ASIGNACION_CONSTANTE":52,"LLAMADA_FUNCION":53,"INGRESO_PARAMETROS":54,"INGRESO_PARAMETROS_":55,"LLAMADA_ARRAY":56,"POSICION_ARRAY":57,"+":58,"-":59,"*":60,"/":61,"**":62,"%":63,"<=":64,">=":65,"===":66,"==":67,"!=":68,"!":69,"||":70,"&&":71,"+=":72,"-=":73,"++":74,"--":75,".":76,"?":77,"DATO_ARRAY":78,"DATO_TYPE":79,"new":80,"numero":81,"decimal":82,"true":83,"false":84,"cadena_d":85,"cadena_s":86,"cadena_t":87,"null":88,"undefined":89,"OTRO_DATO_TYPE":90,"OTRO_VALOR":91,"CONSTANT":92,"if":93,"ELSE_IF":94,"else":95,"ELSE_IF_BODY":96,"switch":97,"CASE":98,"DEFAULT":99,"case":100,"default":101,"for":102,"EXPRESION_FOR":103,"VARIABLE_INICIO":104,"in":105,"of":106,"while":107,"do":108,"type":109,"BODY_TYPE":110,"OTRO_ATRIBUTO":111,"return":112,"console":113,"log":114,"$accept":0,"$end":1},
terminals_: {2:"error",6:"EOF",19:"break",20:"continue",21:";",23:"string",24:"boolean",25:"number",26:"identificador",29:"Array",30:"<",31:">",32:"[",33:"]",35:":",38:"void",39:"function",40:"(",42:")",43:"{",45:"}",46:",",47:"let",48:"=",51:"const",58:"+",59:"-",60:"*",61:"/",62:"**",63:"%",64:"<=",65:">=",66:"===",67:"==",68:"!=",69:"!",70:"||",71:"&&",72:"+=",73:"-=",74:"++",75:"--",76:".",77:"?",80:"new",81:"numero",82:"decimal",83:"true",84:"false",85:"cadena_d",86:"cadena_s",87:"cadena_t",88:"null",89:"undefined",93:"if",95:"else",97:"switch",100:"case",101:"default",102:"for",105:"in",106:"of",107:"while",108:"do",109:"type",112:"return",113:"console",114:"log"},
productions_: [0,[3,1],[4,2],[4,1],[5,1],[5,2],[5,2],[5,1],[5,1],[5,1],[5,1],[5,1],[5,1],[5,1],[5,1],[5,2],[5,2],[5,1],[9,1],[22,1],[22,1],[22,1],[22,1],[27,2],[27,4],[28,3],[28,0],[34,2],[36,2],[37,1],[37,1],[7,9],[41,4],[41,3],[41,0],[44,2],[44,0],[8,6],[8,4],[8,6],[50,6],[50,4],[50,0],[52,6],[52,0],[10,3],[10,1],[53,4],[54,2],[54,0],[55,3],[55,0],[56,2],[57,4],[57,3],[49,3],[49,3],[49,3],[49,3],[49,3],[49,3],[49,3],[49,2],[49,2],[49,3],[49,3],[49,3],[49,3],[49,3],[49,3],[49,3],[49,2],[49,3],[49,3],[49,3],[49,3],[49,2],[49,2],[49,3],[49,1],[49,1],[49,5],[49,3],[49,3],[49,5],[49,1],[49,1],[49,1],[49,1],[49,1],[49,1],[49,1],[49,1],[49,1],[49,1],[79,4],[79,0],[90,2],[90,2],[90,0],[78,2],[78,0],[91,3],[91,0],[92,1],[92,1],[92,1],[92,1],[92,1],[92,1],[92,1],[11,8],[11,2],[94,2],[94,0],[96,8],[96,3],[12,8],[98,5],[98,0],[99,3],[99,0],[13,7],[104,1],[104,3],[104,1],[104,0],[103,5],[103,4],[103,4],[103,3],[103,3],[14,7],[15,9],[16,7],[110,4],[110,0],[111,2],[111,1],[18,3],[18,2],[17,7]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
let data = nodo_inicio;
                       let errorReturn = errorList;
                       Node.count = 0; 
                       nodo_inicio = new Node('START'); 
                       errorList = [];
                       return {tree: data, errors: errorReturn};
                      
break;
case 2:
 if($$[$0-1].type != NodeType.ERROR){nodo_inicio.addChildStart($$[$0-1]);} 
break;
case 3:
 nodo_inicio.addChildStart(new Node('EOF')); 
break;
case 4: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14:
 this.$ = $$[$0]; this.$.setPosition(this._$.first_line, this._$.first_column);
break;
case 5: case 6: case 82: case 83:
 this.$ = $$[$0-1]; this.$.setPosition(this._$.first_line, this._$.first_column);
break;
case 15:
 this.$ = new Node($$[$0-1], NodeType.INS_BREAK); this.$.setPosition(this._$.first_line, this._$.first_column); 
break;
case 16:
 this.$ = new Node($$[$0-1], NodeType.INS_CONTINUE); this.$.setPosition(this._$.first_line, this._$.first_column);
break;
case 17:
 errorList.push(new AnalysisError('Token "'+yytext+'" no esperado.', ErrorType.SINTACTICO, this._$.first_line, this._$.first_column));
                      this.$ = new Node('', NodeType.ERROR);
                    
break;
case 18:
this.$ = new Node(';');
break;
case 19:
 this.$ = new Node('string', NodeType.DT_STRING); this.$.setPosition(this._$.first_line, this._$.first_column);
break;
case 20:
 this.$ = new Node('boolean', NodeType.DT_BOOLEAN); this.$.setPosition(this._$.first_line, this._$.first_column);
break;
case 21:
 this.$ = new Node('number', NodeType.DT_NUMBER); this.$.setPosition(this._$.first_line, this._$.first_column);
break;
case 22:
 this.$ = new Node($$[$0], NodeType.DT_IDENTIFIER); this.$.setPosition(this._$.first_line, this._$.first_column);
break;
case 23:
 $$[$0].name = $$[$0-1].name; this.$ = $$[$0];
break;
case 24:
 this.$ = new Node($$[$0-3], NodeType.DATA_TYPE);
                                           this.$.addChild($$[$0-1]);
                                         
break;
case 25:
 $$[$0-2].addChild(new Node('[]'));
break;
case 26:
 this.$ = new Node('Array', NodeType.DATA_TYPE);
break;
case 27: case 113: case 123:
 this.$ = $$[$0];
break;
case 28: case 29: case 79: case 80:
 this.$ = $$[$0]; 
break;
case 30:
 this.$ = new Node('void', NodeType.DATA_TYPE); 
break;
case 31:
this.$ = new Node('Funcion', NodeType.INS_FUNCION);
                                                                               this.$.setPosition(this._$.first_line, this._$.first_column);
                                                                               this.$.addChild(new Node($$[$0-7]));
                                                                               this.$.childs[0].setPosition(this._$.first_line, this._$.first_column+$$[$0-8].length+1);
                                                                               this.$.addChild($$[$0-5]);
                                                                               this.$.addChild($$[$0-3]);
                                                                               this.$.addChild($$[$0-1]);
                                                                              
break;
case 32:
 let aux = new Node('Parametro');
                                                aux.addChild(new Node($$[$0-1], NodeType.IDENTIFICADOR));                                                  
                                                aux.childs[0].setPosition(this._$.first_line, this._$.first_column+3);
                                                aux.addChild($$[$0]);
                                                $$[$0-3].addChild(aux);
                                              
break;
case 33:
 let aux1 = new Node('Parametro');
                                                aux1.addChild(new Node($$[$0-1], NodeType.IDENTIFICADOR));
                                                aux1.childs[0].setPosition(this._$.first_line, this._$.first_column);
                                                aux1.addChild($$[$0]);
                                                $$[$0-2].addChild(aux1);
                                              
break;
case 34:
 this.$ = new Node('Parametros');
break;
case 35:
 if($$[$0].getType() != NodeType.ERROR){$$[$0-1].addChild($$[$0]);} this.$ = $$[$0-1]; 
break;
case 36:
 this.$ = new Node('Cuerpo');
break;
case 37:
 this.$ = new Declaration($$[$0-4], $$[$0-1], $$[$0-3]);
                                                                            this.$.setPosition(this._$.first_line, this._$.first_column+4);
                                                                                                                                                 
                                                                          
break;
case 38:
 this.$ = new Declaration($$[$0-2], null, $$[$0-1]);
                                                                            this.$.setPosition(this._$.first_line, this._$.first_column+4);
                                                                          
break;
case 39:
 this.$ = new Declaration($$[$0-4], $$[$0-1], $$[$0-3], true);
                                                                            this.$.setPosition(this._$.first_line, this._$.first_column+6);
                                                                          
break;
case 40:
 this.$ = new Node('=', NodeType.INS_DEC_ASIGN);
                                                                            this.$.addChild(new Node($$[$0-4], NodeType.IDENTIFICADOR));
                                                                            this.$.childs[0].setPosition(this._$.first_line, this._$.first_column+2);
                                                                            this.$.addChild($$[$0-3]);
                                                                            this.$.addChild($$[$0-1]);  
                                                                            this.$.addChild($$[$0]);                                                                        
                                                                          
break;
case 41:
 this.$ = new Node('Declaracion', NodeType.INS_DECLARACION);
                                                                            this.$.addChild(new Node($$[$0-2], NodeType.IDENTIFICADOR));
                                                                            this.$.childs[0].setPosition(this._$.first_line, this._$.first_column+2);
                                                                            this.$.addChild($$[$0-1]);
                                                                            this.$.addChild($$[$0]);
                                                                          
break;
case 42: case 44: case 119:
 this.$ = null;
break;
case 43:
 this.$ = new Node('=', NodeType.INS_DEC_ASIGN);
                                                                            this.$.addChild(new Node($$[$0-4], NodeType.IDENTIFICADOR));
                                                                            this.$.childs[1].setPosition(this._$.first_line, this._$.first_column+2);
                                                                            this.$.addChild($$[$0-3]); 
                                                                            this.$.addChild($$[$0-1]);  
                                                                            this.$.addChild($$[$0]);                                                                        
                                                                          
break;
case 45:
 this.$ = new Node('=', NodeType.INS_ASIGNACION);
                                                                            this.$.addChild($$[$0-2]);
                                                                            this.$.addChild($$[$0]);
                                                                          
break;
case 46:
 if($$[$0].type === NodeType.INS_LLAMADA_FUNCION){
                                                                              this.$ = $$[$0];
                                                                            }else{        
                                                                              this.$ = new Node('Expresion', NodeType.INS_EXPRESION);
                                                                              this.$.addChild($$[$0]);
                                                                            }
                                                                          
break;
case 47:
 this.$ = new Node('Llamada Funcion', NodeType.INS_LLAMADA_FUNCION);
                                                    this.$.setPosition(this._$.first_line, this._$.first_column);
                                                    this.$.addChild(new Node($$[$0-3], NodeType.IDENTIFICADOR));
                                                    this.$.childs[0].setPosition(this._$.first_line, this._$.first_column);
                                                    this.$.addChild($$[$0-1]);
                                                  
break;
case 48:
$$[$0].addChildStart($$[$0-1]); this.$ = $$[$0];
break;
case 49: case 51:
this.$ = new Node('Parametros');
break;
case 50:
$$[$0].addChildStart($$[$0-1]);this.$ = $$[$0]; 
break;
case 52:
 this.$ = new Node('Llamada Array', NodeType.INS_LLAMADA_ARRAY);
                                                    this.$.setPosition(this._$.first_line, this._$.first_column);
                                                    this.$.addChild(new Node($$[$0-1], NodeType.IDENTIFICADOR));
                                                    this.$.childs[0].setPosition(this._$.first_line, this._$.first_column);
                                                    this.$.addChild($$[$0]);
                                                  
break;
case 53:
 $$[$0-3].addChild($$[$0-1]); 
break;
case 54:
 this.$ = new Node('Posicion Array'); this.$.addChild($$[$0-1]); this.$.setPosition(this._$.first_line, this._$.first_column);
break;
case 55:
 this.$ = $$[$0-1]; 
break;
case 56: case 57: case 58: case 59: case 60: case 61:
 this.$ = new BinaryOperation($$[$0-2], $$[$0], $$[$0-1]); this.$.setPosition(this._$.first_line, this._$.first_column);
break;
case 62:
 this.$ = new Node($$[$0-1], NodeType.MINUS); this.$.addChild($$[$0]); this.$.setPosition(this._$.first_line, this._$.first_column);
break;
case 63:
 this.$ = new Node($$[$0-1], NodeType.PLUS); this.$.addChild($$[$0]); this.$.setPosition(this._$.first_line, this._$.first_column);
break;
case 64:
 this.$ = new Node($$[$0-1], NodeType.MENOR_QUE); this.$.addChild($$[$0-2]); this.$.addChild($$[$0]); 
break;
case 65:
 this.$ = new Node($$[$0-1], NodeType.MAYOR_QUE); this.$.addChild($$[$0-2]); this.$.addChild($$[$0]); 
break;
case 66:
 this.$ = new Node($$[$0-1], NodeType.MENOR_IGUAL); this.$.addChild($$[$0-2]); this.$.addChild($$[$0]); 
break;
case 67:
 this.$ = new Node($$[$0-1], NodeType.MAYOR_IGUAL); this.$.addChild($$[$0-2]); this.$.addChild($$[$0]); 
break;
case 68: case 69:
 this.$ = new Node($$[$0-1], NodeType.COMPARADOR_IGUAL); this.$.addChild($$[$0-2]); this.$.addChild($$[$0]); 
break;
case 70:
 this.$ = new Node($$[$0-1], NodeType.NO_IGUAL); this.$.addChild($$[$0-2]); this.$.addChild($$[$0]); 
break;
case 71:
 this.$ = new Node($$[$0-1], NodeType.NOT); this.$.addChild($$[$0]); 
break;
case 72:
 this.$ = new Node($$[$0-1], NodeType.OR); this.$.addChild($$[$0-2]); this.$.addChild($$[$0]); this.$.setPosition(this._$.first_line, this._$.first_column);
break;
case 73:
 this.$ = new Node($$[$0-1], NodeType.AND); this.$.addChild($$[$0-2]); this.$.addChild($$[$0]); this.$.setPosition(this._$.first_line, this._$.first_column);
break;
case 74:
 this.$ = new Node($$[$0-1], NodeType.INCREMENTO); 
                                        this.$.addChild(new Node($$[$0-2], NodeType.IDENTIFICADOR));                                          
                                        this.$.childs[0].setPosition(this._$.first_line, this._$.first_column);  
                                        this.$.addChild($$[$0]); 
                                      
break;
case 75:
 this.$ = new Node($$[$0-1], NodeType.DECREMENTO); 
                                        this.$.addChild(new Node($$[$0-2], NodeType.IDENTIFICADOR));                                          
                                        this.$.childs[0].setPosition(this._$.first_line, this._$.first_column);
                                        this.$.addChild($$[$0]); 
                                      
break;
case 76:
 this.$ = new Node($$[$0], NodeType.INCREMENTO_UNARIO); 
                                        this.$.addChild(new Node($$[$0-1], NodeType.IDENTIFICADOR));                                          
                                        this.$.childs[0].setPosition(this._$.first_line, this._$.first_column);
                                      
break;
case 77:
 this.$ = new Node($$[$0], NodeType.DECREMENTO_UNARIO); 
                                        this.$.addChild(new Node($$[$0-1], NodeType.IDENTIFICADOR));
                                        this.$.childs[0].setPosition(this._$.first_line, this._$.first_column);
                                      
break;
case 78:
 this.$ = new Node($$[$0-1], NodeType.PROPIEDAD); 
                                              this.$.addChild($$[$0-2]); 
                                              this.$.addChild($$[$0]); 
                                              this.$.setPosition(this._$.first_line, this._$.first_column); 
break;
case 81:
 this.$ = new Node('Operador\\nTernario', NodeType.INS_OP_TERNARIO); 
                                              this.$.addChild($$[$0-4]); 
                                              this.$.addChild($$[$0-2]); 
                                              this.$.addChild($$[$0]); 
                                              this.$.setPosition(this._$.first_line, this._$.first_column); 
break;
case 84:
 this.$ = new Node('New Array', NodeType.INS_NEW_ARRAY); 
                                              this.$.addChild($$[$0-1]);
                                              this.$.setPosition(this._$.first_line, this._$.first_column);
break;
case 85: case 86:
 this.$ = new Number($$[$0]); this.$.setPosition(this._$.first_line, this._$.first_column);
break;
case 87:
 this.$ = new Bool('true'); this.$.setPosition(this._$.first_line, this._$.first_column);
break;
case 88:
 this.$ = new Bool('false'); this.$.setPosition(this._$.first_line, this._$.first_column);
break;
case 89: case 90: case 91:
 this.$ = new String($$[$0]); this.$.setPosition(this._$.first_line, this._$.first_column);
break;
case 92:
 this.$ = new Identifier($$[$0]); this.$.setPosition(this._$.first_line, this._$.first_column);
break;
case 93: case 94:
 this.$ = new Null(); this.$.setPosition(this._$.first_line, this._$.first_column);
break;
case 95:
 let info = new Node('Atributo');
                                                    info.addChild(new Node($$[$0-3], NodeType.IDENTIFICADOR));                                                      
                                                    info.childs[0].setPosition(this._$.first_line, this._$.first_column);
                                                    info.addChild($$[$0-1]);
                                                    $$[$0].addChild(info); this.$=$$[$0];
                                                  
break;
case 96:
 this.$ = new Node('Object Type', NodeType.OBJ_TYPE);
break;
case 97: case 98:
this.$ = $$[$0];
break;
case 99:
this.$ = new Node('Object Type', NodeType.OBJ_TYPE);
break;
case 100: case 102:
$$[$0].addChildStart($$[$0-1]); this.$=$$[$0]; 
break;
case 101: case 103:
this.$ = new Node('Object Array', NodeType.OBJ_ARRAY);
break;
case 104:
this.$ = new Node($$[$0], NodeType.NUMBER); this.$.setPosition(this._$.first_line, this._$.first_column);
break;
case 105: case 106: case 107:
this.$ = new Node($$[$0], NodeType.STRING); this.$.setPosition(this._$.first_line, this._$.first_column);
break;
case 108:
this.$ = new Node($$[$0], NodeType.IDENTIFICADOR); this.$.setPosition(this._$.first_line, this._$.first_column);
break;
case 109: case 110:
this.$ = new Node($$[$0], NodeType.BOOLEAN); this.$.setPosition(this._$.first_line, this._$.first_column);
break;
case 111:
 this.$ = new Node("Instruccion if", NodeType.INS_IF)
                                                   this.$.addChild($$[$0-5]);
                                                   this.$.addChild($$[$0-2]);
                                                   this.$.addChild($$[$0]);
                                                  
break;
case 112:
 errorList.push(new AnalysisError('Token "'+yytext+'" no esperado.', ErrorType.SINTACTICO, this._$.first_line, this._$.first_column));
                           this.$ = new Node('', NodeType.ERROR);
break;
case 115:
 this.$ = new Node("Bloque else if", NodeType.INS_ELSE_IF)
                                                    this.$.addChild($$[$0-5]);
                                                    this.$.addChild($$[$0-2]);
                                                    this.$.addChild($$[$0]);
                                                  
break;
case 116:
 this.$ = new Node("Bloque else", NodeType.INS_ELSE)
                                                    this.$.addChild($$[$0-1]);
                                                  
break;
case 117:
 this.$ = new Node("Instruccion Switch", NodeType.INS_SWITCH)
                                                            this.$.addChild($$[$0-5]);
                                                            this.$.addChild($$[$0-2]);
                                                            this.$.addChild($$[$0-1]);
                                                          
break;
case 118:
 this.$ = new Node("Bloque case", NodeType.INS_CASE)
                                                            this.$.addChild($$[$0-3]);
                                                            this.$.addChild($$[$0-1]);
                                                            this.$.addChild($$[$0]);
                                                          
break;
case 120:
 this.$ = new Node("Bloque default", NodeType.INS_DEFAULT)
                                                            this.$.addChild($$[$0]);
                                                          
break;
case 121:
 this.$ = null; 
break;
case 122:
 this.$ = new Node("Instruccion For", NodeType.INS_FOR)
                                                this.$.addChild($$[$0-4]);
                                                this.$.addChild($$[$0-1]);
                                              
break;
case 124:
 this.$ = new Node('Asignacion', NodeType.INS_ASIGNACION);
                                            this.$.addChild(new Node($$[$0-2], NodeType.IDENTIFICADOR));
                                            this.$.childs[0].setPosition(this._$.first_line, this._$.first_column);
                                            this.$.addChild(new Node($$[$0-1]));
                                            this.$.addChild($$[$0]);
                                          
break;
case 125:
 this.$ = new Node('Variable'); this.$.setPosition(this._$.first_line, this._$.first_column);
                                            this.$.addChild( new Node($$[$0], NodeType.IDENTIFICADOR));
                                            this.$.code = $$[$0];
                                          
break;
case 126:
 this.$ = new Node('null'); 
break;
case 127:
 this.$ = new Node("Expresion for");
                                                       this.$.addChild($$[$0-4]);
                                                       this.$.addChild($$[$0-2]);
                                                       this.$.addChild($$[$0]);
                                                      
break;
case 128:
 this.$ = new Node("Expresion In");
                                                        this.$.addChild(new Node($$[$0-3]));
                                                        this.$.addChild(new Node($$[$0-2], NodeType.IDENTIFICADOR));
                                                        this.$.childs[1].setPosition(this._$.first_line, this._$.first_column + 4);
                                                        this.$.addChild($$[$0]);
                                                      
break;
case 129:
 this.$ = new Node("Expresion Of");
                                                        this.$.addChild(new Node($$[$0-3]));
                                                        this.$.addChild(new Node($$[$0-2], NodeType.IDENTIFICADOR));                                                          
                                                        this.$.childs[1].setPosition(this._$.first_line, this._$.first_column + 4);
                                                        this.$.addChild($$[$0]);
                                                      
break;
case 130:
 this.$ = new Node("Expresion In");
                                                        this.$.addChild(new Node($$[$0-2], NodeType.IDENTIFICADOR));                                                          
                                                        this.$.childs[0].setPosition(this._$.first_line, this._$.first_column);
                                                        this.$.addChild($$[$0]);
                                                      
break;
case 131:
 this.$ = new Node("Expresion Of");
                                                        this.$.addChild(new Node($$[$0-2], NodeType.IDENTIFICADOR));                                                                                                                    
                                                        this.$.childs[0].setPosition(this._$.first_line, this._$.first_column);
                                                        this.$.addChild($$[$0]);
                                                      
break;
case 132:
 this.$ = new Node("Instruccion\\n While", NodeType.INS_WHILE)
                                                        this.$.addChild($$[$0-4]);
                                                        this.$.addChild($$[$0-1]);
                                                      
break;
case 133:
 this.$ = new Node("Instruccion\\n Do While", NodeType.INS_DO_WHILE)
                                                                this.$.addChild($$[$0-6]);
                                                                this.$.addChild($$[$0-2]);
                                                              
break;
case 134:
 this.$ = new Node("Type", NodeType.INS_TYPE);
                                                                this.$.addChild(new Node($$[$0-5], NodeType.IDENTIFICADOR));
                                                                this.$.childs[0].setPosition(this._$.first_line, this._$.first_column+6);
                                                                this.$.addChild(new Node($$[$0-4]));
                                                                this.$.addChild($$[$0-2]);
                                                              
break;
case 135:
 let aux2 = new Node('Atributo');
                                                                aux2.addChild(new Node($$[$0-3], NodeType.IDENTIFICADOR));                                                          
                                                                aux2.childs[0].setPosition(this._$.first_line, this._$.first_column);
                                                                aux2.addChild($$[$0-1]); $$[$0].addChildStart(aux2); this.$ = $$[$0];
                                                                this.$.code = $$[$0-3] +':'+$$[$0-1].code + $$[$0].code;
                                                              
break;
case 136:
 this.$ = new Node('Atributos');
break;
case 137:
this.$ = $$[$0]; this.$.code = ', '+$$[$0].code;
break;
case 138:
this.$ = $$[$0]
break;
case 139:
 this.$ = new Node('Return', NodeType.INS_RETURN);  this.$.addChild($$[$0-1]); this.$.setPosition(this._$.first_line, this._$.first_column);
break;
case 140:
 this.$ = new Node('Return', NodeType.INS_RETURN); this.$.setPosition(this._$.first_line, this._$.first_column);
break;
case 141:
 this.$ = new CallFunction('console.log', $$[$0-2]); this.$.setPosition(this._$.first_line, this._$.first_column); 
break;
}
},
table: [{2:$V0,3:1,4:2,5:3,6:$V1,7:5,8:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:$V2,20:$V3,26:$V4,32:$V5,39:$V6,40:$V7,43:$V8,47:$V9,49:22,51:$Va,53:36,56:37,58:$Vb,59:$Vc,69:$Vd,80:$Ve,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,93:$Vo,97:$Vp,102:$Vq,107:$Vr,108:$Vs,109:$Vt,112:$Vu,113:$Vv},{1:[3]},{1:[2,1]},{2:$V0,4:50,5:3,6:$V1,7:5,8:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:$V2,20:$V3,26:$V4,32:$V5,39:$V6,40:$V7,43:$V8,47:$V9,49:22,51:$Va,53:36,56:37,58:$Vb,59:$Vc,69:$Vd,80:$Ve,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,93:$Vo,97:$Vp,102:$Vq,107:$Vr,108:$Vs,109:$Vt,112:$Vu,113:$Vv},{1:[2,3]},o($Vw,[2,4]),{9:51,21:$Vx},{9:53,21:$Vx},o($Vw,[2,7]),o($Vw,[2,8]),o($Vw,[2,9]),o($Vw,[2,10]),o($Vw,[2,11]),o($Vw,[2,12]),o($Vw,[2,13]),o($Vw,[2,14]),{9:54,21:$Vx},{9:55,21:$Vx},o($Vw,[2,17]),{26:[1,56]},{26:[1,57]},{26:[1,58]},{21:[2,46],30:$Vy,31:$Vz,48:[1,59],58:$VA,59:$VB,60:$VC,61:$VD,62:$VE,63:$VF,64:$VG,65:$VH,66:$VI,67:$VJ,68:$VK,70:$VL,71:$VM,76:$VN,77:$VO},{2:[1,78],40:[1,77]},{40:[1,79]},{40:[1,80]},{40:[1,81]},{43:[1,82]},{26:[1,83]},{76:[1,84]},{9:86,21:$Vx,26:$V4,32:$V5,40:$V7,43:$V8,49:85,53:36,56:37,58:$Vb,59:$Vc,69:$Vd,80:$Ve,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn},{26:$V4,32:$V5,40:$V7,43:$V8,49:87,53:36,56:37,58:$Vb,59:$Vc,69:$Vd,80:$Ve,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn},{26:$V4,32:$V5,40:$V7,43:$V8,49:88,53:36,56:37,58:$Vb,59:$Vc,69:$Vd,80:$Ve,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn},{26:$V4,32:$V5,40:$V7,43:$V8,49:89,53:36,56:37,58:$Vb,59:$Vc,69:$Vd,80:$Ve,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn},{26:$V4,32:$V5,40:$V7,43:$V8,49:90,53:36,56:37,58:$Vb,59:$Vc,69:$Vd,80:$Ve,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn},o($VP,[2,92],{57:96,32:[1,97],40:[1,95],72:[1,91],73:[1,92],74:[1,93],75:[1,94]}),o($VP,[2,79]),o($VP,[2,80]),{26:$V4,32:$V5,33:[2,101],40:$V7,43:$V8,49:99,53:36,56:37,58:$Vb,59:$Vc,69:$Vd,78:98,80:$Ve,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn},{26:$VQ,45:$VR,79:100},{29:[1,102]},o($VP,[2,85]),o($VP,[2,86]),o($VP,[2,87]),o($VP,[2,88]),o($VP,[2,89]),o($VP,[2,90]),o($VP,[2,91]),o($VP,[2,93]),o($VP,[2,94]),{1:[2,2]},o($Vw,[2,5]),o($Vw,[2,18]),o($Vw,[2,6]),o($Vw,[2,15]),o($Vw,[2,16]),{40:[1,103]},{34:104,35:$VS},{34:106,35:$VS},{26:$V4,32:$V5,40:$V7,43:$V8,49:107,53:36,56:37,58:$Vb,59:$Vc,69:$Vd,80:$Ve,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn},{26:$V4,32:$V5,40:$V7,43:$V8,49:108,53:36,56:37,58:$Vb,59:$Vc,69:$Vd,80:$Ve,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn},{26:$V4,32:$V5,40:$V7,43:$V8,49:109,53:36,56:37,58:$Vb,59:$Vc,69:$Vd,80:$Ve,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn},{26:$V4,32:$V5,40:$V7,43:$V8,49:110,53:36,56:37,58:$Vb,59:$Vc,69:$Vd,80:$Ve,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn},{26:$V4,32:$V5,40:$V7,43:$V8,49:111,53:36,56:37,58:$Vb,59:$Vc,69:$Vd,80:$Ve,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn},{26:$V4,32:$V5,40:$V7,43:$V8,49:112,53:36,56:37,58:$Vb,59:$Vc,69:$Vd,80:$Ve,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn},{26:$V4,32:$V5,40:$V7,43:$V8,49:113,53:36,56:37,58:$Vb,59:$Vc,69:$Vd,80:$Ve,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn},{26:$V4,32:$V5,40:$V7,43:$V8,49:114,53:36,56:37,58:$Vb,59:$Vc,69:$Vd,80:$Ve,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn},{26:$V4,32:$V5,40:$V7,43:$V8,49:115,53:36,56:37,58:$Vb,59:$Vc,69:$Vd,80:$Ve,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn},{26:$V4,32:$V5,40:$V7,43:$V8,49:116,53:36,56:37,58:$Vb,59:$Vc,69:$Vd,80:$Ve,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn},{26:$V4,32:$V5,40:$V7,43:$V8,49:117,53:36,56:37,58:$Vb,59:$Vc,69:$Vd,80:$Ve,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn},{26:$V4,32:$V5,40:$V7,43:$V8,49:118,53:36,56:37,58:$Vb,59:$Vc,69:$Vd,80:$Ve,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn},{26:$V4,32:$V5,40:$V7,43:$V8,49:119,53:36,56:37,58:$Vb,59:$Vc,69:$Vd,80:$Ve,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn},{26:$V4,32:$V5,40:$V7,43:$V8,49:120,53:36,56:37,58:$Vb,59:$Vc,69:$Vd,80:$Ve,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn},{26:$V4,32:$V5,40:$V7,43:$V8,49:121,53:36,56:37,58:$Vb,59:$Vc,69:$Vd,80:$Ve,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn},{26:$V4,32:$V5,40:$V7,43:$V8,49:122,53:36,56:37,58:$Vb,59:$Vc,69:$Vd,80:$Ve,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn},{26:$V4,32:$V5,40:$V7,43:$V8,49:123,53:36,56:37,58:$Vb,59:$Vc,69:$Vd,80:$Ve,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn},{26:$V4,32:$V5,40:$V7,43:$V8,49:124,53:36,56:37,58:$Vb,59:$Vc,69:$Vd,80:$Ve,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn},{26:$V4,32:$V5,40:$V7,43:$V8,49:125,53:36,56:37,58:$Vb,59:$Vc,69:$Vd,80:$Ve,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn},o($Vw,[2,112]),{26:$V4,32:$V5,40:$V7,43:$V8,49:126,53:36,56:37,58:$Vb,59:$Vc,69:$Vd,80:$Ve,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn},{8:131,21:[2,126],26:[1,130],47:[1,129],51:$Va,103:127,104:128},{26:$V4,32:$V5,40:$V7,43:$V8,49:132,53:36,56:37,58:$Vb,59:$Vc,69:$Vd,80:$Ve,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn},o($VT,$VU,{44:133}),{48:[1,134]},{114:[1,135]},{9:136,21:$Vx,30:$Vy,31:$Vz,58:$VA,59:$VB,60:$VC,61:$VD,62:$VE,63:$VF,64:$VG,65:$VH,66:$VI,67:$VJ,68:$VK,70:$VL,71:$VM,76:$VN,77:$VO},o($Vw,[2,140]),{30:$Vy,31:$Vz,42:[1,137],58:$VA,59:$VB,60:$VC,61:$VD,62:$VE,63:$VF,64:$VG,65:$VH,66:$VI,67:$VJ,68:$VK,70:$VL,71:$VM,76:$VN,77:$VO},o($VV,[2,62],{60:$VC,61:$VD,62:$VE,63:$VF,76:$VN}),o($VV,[2,63],{60:$VC,61:$VD,62:$VE,63:$VF,76:$VN}),o($VP,[2,71]),{26:$V4,32:$V5,40:$V7,43:$V8,49:138,53:36,56:37,58:$Vb,59:$Vc,69:$Vd,80:$Ve,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn},{26:$V4,32:$V5,40:$V7,43:$V8,49:139,53:36,56:37,58:$Vb,59:$Vc,69:$Vd,80:$Ve,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn},o($VP,[2,76]),o($VP,[2,77]),{26:$V4,32:$V5,40:$V7,42:$VW,43:$V8,49:141,53:36,54:140,56:37,58:$Vb,59:$Vc,69:$Vd,80:$Ve,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn},o($VP,[2,52],{32:[1,142]}),{26:$V4,32:$V5,40:$V7,43:$V8,49:143,53:36,56:37,58:$Vb,59:$Vc,69:$Vd,80:$Ve,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn},{33:[1,144]},{30:$Vy,31:$Vz,33:$VX,46:$VY,58:$VA,59:$VB,60:$VC,61:$VD,62:$VE,63:$VF,64:$VG,65:$VH,66:$VI,67:$VJ,68:$VK,70:$VL,71:$VM,76:$VN,77:$VO,91:145},{45:[1,147]},{35:[1,148]},{40:[1,149]},o($VZ,[2,34],{41:150}),{21:$V_,46:$V$,48:[1,151],50:152},{22:155,23:$V01,24:$V11,25:$V21,26:$V31,27:154,29:$V41},{48:[1,161]},{21:[2,45],30:$Vy,31:$Vz,58:$VA,59:$VB,60:$VC,61:$VD,62:$VE,63:$VF,64:$VG,65:$VH,66:$VI,67:$VJ,68:$VK,70:$VL,71:$VM,76:$VN,77:$VO},o($VV,[2,56],{60:$VC,61:$VD,62:$VE,63:$VF,76:$VN}),o($VV,[2,57],{60:$VC,61:$VD,62:$VE,63:$VF,76:$VN}),o($V51,[2,58],{62:$VE,76:$VN}),o($V51,[2,59],{62:$VE,76:$VN}),o($V61,[2,60],{76:$VN}),o($V51,[2,61],{62:$VE,76:$VN}),o($V71,[2,64],{58:$VA,59:$VB,60:$VC,61:$VD,62:$VE,63:$VF,76:$VN}),o($V71,[2,65],{58:$VA,59:$VB,60:$VC,61:$VD,62:$VE,63:$VF,76:$VN}),o($V71,[2,66],{58:$VA,59:$VB,60:$VC,61:$VD,62:$VE,63:$VF,76:$VN}),o($V71,[2,67],{58:$VA,59:$VB,60:$VC,61:$VD,62:$VE,63:$VF,76:$VN}),o($V81,[2,68],{30:$Vy,31:$Vz,58:$VA,59:$VB,60:$VC,61:$VD,62:$VE,63:$VF,64:$VG,65:$VH,76:$VN}),o($V81,[2,69],{30:$Vy,31:$Vz,58:$VA,59:$VB,60:$VC,61:$VD,62:$VE,63:$VF,64:$VG,65:$VH,76:$VN}),o($V81,[2,70],{30:$Vy,31:$Vz,58:$VA,59:$VB,60:$VC,61:$VD,62:$VE,63:$VF,64:$VG,65:$VH,76:$VN}),o([21,33,35,42,45,46,48,70],[2,72],{30:$Vy,31:$Vz,58:$VA,59:$VB,60:$VC,61:$VD,62:$VE,63:$VF,64:$VG,65:$VH,66:$VI,67:$VJ,68:$VK,71:$VM,76:$VN,77:$VO}),o($V91,[2,73],{30:$Vy,31:$Vz,58:$VA,59:$VB,60:$VC,61:$VD,62:$VE,63:$VF,64:$VG,65:$VH,66:$VI,67:$VJ,68:$VK,76:$VN,77:$VO}),o($V61,[2,78],{76:$VN}),{30:$Vy,31:$Vz,35:[1,162],58:$VA,59:$VB,60:$VC,61:$VD,62:$VE,63:$VF,64:$VG,65:$VH,66:$VI,67:$VJ,68:$VK,70:$VL,71:$VM,76:$VN,77:$VO},{30:$Vy,31:$Vz,42:[1,163],58:$VA,59:$VB,60:$VC,61:$VD,62:$VE,63:$VF,64:$VG,65:$VH,66:$VI,67:$VJ,68:$VK,70:$VL,71:$VM,76:$VN,77:$VO},{30:$Vy,31:$Vz,42:[1,164],58:$VA,59:$VB,60:$VC,61:$VD,62:$VE,63:$VF,64:$VG,65:$VH,66:$VI,67:$VJ,68:$VK,70:$VL,71:$VM,76:$VN,77:$VO},{42:[1,165]},{21:[1,166]},{26:[1,167]},{21:[2,125],48:[1,170],105:[1,168],106:[1,169]},{21:[2,123]},{30:$Vy,31:$Vz,42:[1,171],58:$VA,59:$VB,60:$VC,61:$VD,62:$VE,63:$VF,64:$VG,65:$VH,66:$VI,67:$VJ,68:$VK,70:$VL,71:$VM,76:$VN,77:$VO},{2:$V0,5:173,7:5,8:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:$V2,20:$V3,26:$V4,32:$V5,39:$V6,40:$V7,43:$V8,45:[1,172],47:$V9,49:22,51:$Va,53:36,56:37,58:$Vb,59:$Vc,69:$Vd,80:$Ve,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,93:$Vo,97:$Vp,102:$Vq,107:$Vr,108:$Vs,109:$Vt,112:$Vu,113:$Vv},{43:[1,174]},{40:[1,175]},o($Vw,[2,139]),o($VP,[2,55]),o($VP,[2,74]),o($VP,[2,75]),{42:[1,176]},{30:$Vy,31:$Vz,42:$Va1,46:$Vb1,55:177,58:$VA,59:$VB,60:$VC,61:$VD,62:$VE,63:$VF,64:$VG,65:$VH,66:$VI,67:$VJ,68:$VK,70:$VL,71:$VM,76:$VN,77:$VO},{26:$V4,32:$V5,40:$V7,43:$V8,49:179,53:36,56:37,58:$Vb,59:$Vc,69:$Vd,80:$Ve,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn},{30:$Vy,31:$Vz,33:[1,180],58:$VA,59:$VB,60:$VC,61:$VD,62:$VE,63:$VF,64:$VG,65:$VH,66:$VI,67:$VJ,68:$VK,70:$VL,71:$VM,76:$VN,77:$VO},o($VP,[2,82]),{33:[2,100]},{26:$V4,32:$V5,40:$V7,43:$V8,49:181,53:36,56:37,58:$Vb,59:$Vc,69:$Vd,80:$Ve,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn},o($VP,[2,83]),{26:$V4,32:$V5,40:$V7,43:$V8,49:182,53:36,56:37,58:$Vb,59:$Vc,69:$Vd,80:$Ve,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn},{26:$V4,32:$V5,40:$V7,43:$V8,49:183,53:36,56:37,58:$Vb,59:$Vc,69:$Vd,80:$Ve,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn},{26:[1,186],42:[1,184],46:[1,185]},{26:$V4,32:$V5,40:$V7,43:$V8,49:187,53:36,56:37,58:$Vb,59:$Vc,69:$Vd,80:$Ve,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn},{21:[2,38]},{26:[1,188]},o([21,26,42,46,48],[2,27]),o($Vc1,[2,26],{28:189}),{30:[1,190]},o($Vc1,[2,19]),o($Vc1,[2,20]),o($Vc1,[2,21]),o($Vc1,[2,22]),{26:$V4,32:$V5,40:$V7,43:$V8,49:191,53:36,56:37,58:$Vb,59:$Vc,69:$Vd,80:$Ve,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn},{26:$V4,32:$V5,40:$V7,43:$V8,49:192,53:36,56:37,58:$Vb,59:$Vc,69:$Vd,80:$Ve,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn},{43:[1,193]},{43:[1,194]},{43:[1,195]},{26:$V4,32:$V5,40:$V7,43:$V8,49:196,53:36,56:37,58:$Vb,59:$Vc,69:$Vd,80:$Ve,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn},{34:104,35:$VS,105:[1,197],106:[1,198]},{26:$V4,32:$V5,40:$V7,43:$V8,49:199,53:36,56:37,58:$Vb,59:$Vc,69:$Vd,80:$Ve,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn},{26:$V4,32:$V5,40:$V7,43:$V8,49:200,53:36,56:37,58:$Vb,59:$Vc,69:$Vd,80:$Ve,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn},{26:$V4,32:$V5,40:$V7,43:$V8,49:201,53:36,56:37,58:$Vb,59:$Vc,69:$Vd,80:$Ve,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn},{43:[1,202]},{107:[1,203]},o($Vd1,[2,35]),{26:$Ve1,45:$Vf1,110:204},{26:$V4,32:$V5,40:$V7,42:$VW,43:$V8,49:141,53:36,54:206,56:37,58:$Vb,59:$Vc,69:$Vd,80:$Ve,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn},o($VP,[2,47]),{42:[2,48]},{26:$V4,32:$V5,40:$V7,43:$V8,49:207,53:36,56:37,58:$Vb,59:$Vc,69:$Vd,80:$Ve,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn},{30:$Vy,31:$Vz,33:[1,208],58:$VA,59:$VB,60:$VC,61:$VD,62:$VE,63:$VF,64:$VG,65:$VH,66:$VI,67:$VJ,68:$VK,70:$VL,71:$VM,76:$VN,77:$VO},o($Vg1,[2,54]),{30:$Vy,31:$Vz,33:$VX,46:$VY,58:$VA,59:$VB,60:$VC,61:$VD,62:$VE,63:$VF,64:$VG,65:$VH,66:$VI,67:$VJ,68:$VK,70:$VL,71:$VM,76:$VN,77:$VO,91:209},{21:[1,212],30:$Vy,31:$Vz,45:[2,99],46:[1,211],58:$VA,59:$VB,60:$VC,61:$VD,62:$VE,63:$VF,64:$VG,65:$VH,66:$VI,67:$VJ,68:$VK,70:$VL,71:$VM,76:$VN,77:$VO,90:210},{30:$Vy,31:$Vz,42:[1,213],58:$VA,59:$VB,60:$VC,61:$VD,62:$VE,63:$VF,64:$VG,65:$VH,66:$VI,67:$VJ,68:$VK,70:$VL,71:$VM,76:$VN,77:$VO},{35:[1,215],36:214},{26:[1,216]},{34:217,35:$VS},{21:$V_,30:$Vy,31:$Vz,46:$V$,50:218,58:$VA,59:$VB,60:$VC,61:$VD,62:$VE,63:$VF,64:$VG,65:$VH,66:$VI,67:$VJ,68:$VK,70:$VL,71:$VM,76:$VN,77:$VO},{34:219,35:$VS},o($Vh1,[2,23],{32:[1,220]}),{22:155,23:$V01,24:$V11,25:$V21,26:$V31,27:221,29:$V41},{21:$Vi1,30:$Vy,31:$Vz,46:$Vj1,52:222,58:$VA,59:$VB,60:$VC,61:$VD,62:$VE,63:$VF,64:$VG,65:$VH,66:$VI,67:$VJ,68:$VK,70:$VL,71:$VM,76:$VN,77:$VO},o($V91,[2,81],{30:$Vy,31:$Vz,58:$VA,59:$VB,60:$VC,61:$VD,62:$VE,63:$VF,64:$VG,65:$VH,66:$VI,67:$VJ,68:$VK,76:$VN,77:$VO}),o($VT,$VU,{44:224}),o($Vk1,$Vl1,{98:225,100:$Vm1}),o($VT,$VU,{44:227}),{21:[1,228],30:$Vy,31:$Vz,58:$VA,59:$VB,60:$VC,61:$VD,62:$VE,63:$VF,64:$VG,65:$VH,66:$VI,67:$VJ,68:$VK,70:$VL,71:$VM,76:$VN,77:$VO},{26:$V4,32:$V5,40:$V7,43:$V8,49:229,53:36,56:37,58:$Vb,59:$Vc,69:$Vd,80:$Ve,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn},{26:$V4,32:$V5,40:$V7,43:$V8,49:230,53:36,56:37,58:$Vb,59:$Vc,69:$Vd,80:$Ve,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn},{30:$Vy,31:$Vz,42:[2,130],58:$VA,59:$VB,60:$VC,61:$VD,62:$VE,63:$VF,64:$VG,65:$VH,66:$VI,67:$VJ,68:$VK,70:$VL,71:$VM,76:$VN,77:$VO},{30:$Vy,31:$Vz,42:[2,131],58:$VA,59:$VB,60:$VC,61:$VD,62:$VE,63:$VF,64:$VG,65:$VH,66:$VI,67:$VJ,68:$VK,70:$VL,71:$VM,76:$VN,77:$VO},{21:[2,124],30:$Vy,31:$Vz,58:$VA,59:$VB,60:$VC,61:$VD,62:$VE,63:$VF,64:$VG,65:$VH,66:$VI,67:$VJ,68:$VK,70:$VL,71:$VM,76:$VN,77:$VO},o($VT,$VU,{44:231}),{40:[1,232]},{45:[1,233]},{35:[1,234]},{42:[1,235]},{30:$Vy,31:$Vz,42:$Va1,46:$Vb1,55:236,58:$VA,59:$VB,60:$VC,61:$VD,62:$VE,63:$VF,64:$VG,65:$VH,66:$VI,67:$VJ,68:$VK,70:$VL,71:$VM,76:$VN,77:$VO},o($Vg1,[2,53]),{33:[2,102]},{45:[2,95]},{26:$VQ,45:$VR,79:237},{26:$VQ,45:$VR,79:238},o($VP,[2,84]),{43:[1,239]},{22:155,23:$V01,24:$V11,25:$V21,26:$V31,27:241,29:$V41,37:240,38:[1,242]},{34:243,35:$VS},o($VZ,[2,33]),{21:[2,37]},{21:$V_,46:$V$,48:[1,244],50:245},{33:[1,246]},{31:[1,247]},{21:[2,39]},{26:[1,248]},{2:$V0,5:173,7:5,8:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:$V2,20:$V3,26:$V4,32:$V5,39:$V6,40:$V7,43:$V8,45:[1,249],47:$V9,49:22,51:$Va,53:36,56:37,58:$Vb,59:$Vc,69:$Vd,80:$Ve,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,93:$Vo,97:$Vp,102:$Vq,107:$Vr,108:$Vs,109:$Vt,112:$Vu,113:$Vv},{45:[2,121],99:250,101:[1,251]},{26:[1,257],81:[1,253],83:[1,258],84:[1,259],85:[1,254],86:[1,255],87:[1,256],92:252},{2:$V0,5:173,7:5,8:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:$V2,20:$V3,26:$V4,32:$V5,39:$V6,40:$V7,43:$V8,45:[1,260],47:$V9,49:22,51:$Va,53:36,56:37,58:$Vb,59:$Vc,69:$Vd,80:$Ve,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,93:$Vo,97:$Vp,102:$Vq,107:$Vr,108:$Vs,109:$Vt,112:$Vu,113:$Vv},{26:$V4,32:$V5,40:$V7,43:$V8,49:261,53:36,56:37,58:$Vb,59:$Vc,69:$Vd,80:$Ve,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn},{30:$Vy,31:$Vz,42:[2,128],58:$VA,59:$VB,60:$VC,61:$VD,62:$VE,63:$VF,64:$VG,65:$VH,66:$VI,67:$VJ,68:$VK,70:$VL,71:$VM,76:$VN,77:$VO},{30:$Vy,31:$Vz,42:[2,129],58:$VA,59:$VB,60:$VC,61:$VD,62:$VE,63:$VF,64:$VG,65:$VH,66:$VI,67:$VJ,68:$VK,70:$VL,71:$VM,76:$VN,77:$VO},{2:$V0,5:173,7:5,8:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:$V2,20:$V3,26:$V4,32:$V5,39:$V6,40:$V7,43:$V8,45:[1,262],47:$V9,49:22,51:$Va,53:36,56:37,58:$Vb,59:$Vc,69:$Vd,80:$Ve,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,93:$Vo,97:$Vp,102:$Vq,107:$Vr,108:$Vs,109:$Vt,112:$Vu,113:$Vv},{26:$V4,32:$V5,40:$V7,43:$V8,49:263,53:36,56:37,58:$Vb,59:$Vc,69:$Vd,80:$Ve,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn},{9:264,21:$Vx},{22:155,23:$V01,24:$V11,25:$V21,26:$V31,27:265,29:$V41},{9:266,21:$Vx},{42:[2,50]},{45:[2,97]},{45:[2,98]},o($VT,$VU,{44:267}),{43:[2,28]},{43:[2,29]},{43:[2,30]},o($VZ,[2,32]),{26:$V4,32:$V5,40:$V7,43:$V8,49:268,53:36,56:37,58:$Vb,59:$Vc,69:$Vd,80:$Ve,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn},{21:[2,41]},o($Vc1,[2,25]),o($Vh1,[2,24]),{34:269,35:$VS},o($Vw,$Vn1,{94:270,95:$Vo1}),{45:[1,272]},{35:[1,273]},{35:[1,274]},{35:[2,104]},{35:[2,105]},{35:[2,106]},{35:[2,107]},{35:[2,108]},{35:[2,109]},{35:[2,110]},o($Vw,[2,122]),{30:$Vy,31:$Vz,42:[2,127],58:$VA,59:$VB,60:$VC,61:$VD,62:$VE,63:$VF,64:$VG,65:$VH,66:$VI,67:$VJ,68:$VK,70:$VL,71:$VM,76:$VN,77:$VO},o($Vw,[2,132]),{30:$Vy,31:$Vz,42:[1,275],58:$VA,59:$VB,60:$VC,61:$VD,62:$VE,63:$VF,64:$VG,65:$VH,66:$VI,67:$VJ,68:$VK,70:$VL,71:$VM,76:$VN,77:$VO},o($Vw,[2,134]),{26:$Ve1,45:$Vf1,46:[1,277],110:278,111:276},o($Vw,[2,141]),{2:$V0,5:173,7:5,8:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:$V2,20:$V3,26:$V4,32:$V5,39:$V6,40:$V7,43:$V8,45:[1,279],47:$V9,49:22,51:$Va,53:36,56:37,58:$Vb,59:$Vc,69:$Vd,80:$Ve,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,93:$Vo,97:$Vp,102:$Vq,107:$Vr,108:$Vs,109:$Vt,112:$Vu,113:$Vv},{21:$V_,30:$Vy,31:$Vz,46:$V$,50:280,58:$VA,59:$VB,60:$VC,61:$VD,62:$VE,63:$VF,64:$VG,65:$VH,66:$VI,67:$VJ,68:$VK,70:$VL,71:$VM,76:$VN,77:$VO},{48:[1,281]},o($Vw,[2,111]),{43:[1,284],93:[1,283],96:282},o($Vw,[2,117]),o($VT,$VU,{44:285}),o($Vd1,$VU,{44:286}),{9:287,21:$Vx},{45:[2,135]},{26:$Ve1,45:$Vf1,110:288},{45:[2,138]},o($Vw,[2,31]),{21:[2,40]},{26:$V4,32:$V5,40:$V7,43:$V8,49:289,53:36,56:37,58:$Vb,59:$Vc,69:$Vd,80:$Ve,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn},o($Vw,[2,113]),{40:[1,290]},o($VT,$VU,{44:291}),{2:$V0,5:173,7:5,8:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:$V2,20:$V3,26:$V4,32:$V5,39:$V6,40:$V7,43:$V8,45:[2,120],47:$V9,49:22,51:$Va,53:36,56:37,58:$Vb,59:$Vc,69:$Vd,80:$Ve,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,93:$Vo,97:$Vp,102:$Vq,107:$Vr,108:$Vs,109:$Vt,112:$Vu,113:$Vv},o($Vk1,$Vl1,{7:5,8:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,49:22,53:36,56:37,5:173,98:292,2:$V0,19:$V2,20:$V3,26:$V4,32:$V5,39:$V6,40:$V7,43:$V8,47:$V9,51:$Va,58:$Vb,59:$Vc,69:$Vd,80:$Ve,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,93:$Vo,97:$Vp,100:$Vm1,102:$Vq,107:$Vr,108:$Vs,109:$Vt,112:$Vu,113:$Vv}),o($Vw,[2,133]),{45:[2,137]},{21:$Vi1,30:$Vy,31:$Vz,46:$Vj1,52:293,58:$VA,59:$VB,60:$VC,61:$VD,62:$VE,63:$VF,64:$VG,65:$VH,66:$VI,67:$VJ,68:$VK,70:$VL,71:$VM,76:$VN,77:$VO},{26:$V4,32:$V5,40:$V7,43:$V8,49:294,53:36,56:37,58:$Vb,59:$Vc,69:$Vd,80:$Ve,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn},{2:$V0,5:173,7:5,8:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:$V2,20:$V3,26:$V4,32:$V5,39:$V6,40:$V7,43:$V8,45:[1,295],47:$V9,49:22,51:$Va,53:36,56:37,58:$Vb,59:$Vc,69:$Vd,80:$Ve,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,93:$Vo,97:$Vp,102:$Vq,107:$Vr,108:$Vs,109:$Vt,112:$Vu,113:$Vv},o($Vk1,[2,118]),{21:[2,43]},{30:$Vy,31:$Vz,42:[1,296],58:$VA,59:$VB,60:$VC,61:$VD,62:$VE,63:$VF,64:$VG,65:$VH,66:$VI,67:$VJ,68:$VK,70:$VL,71:$VM,76:$VN,77:$VO},o($Vw,[2,116]),{43:[1,297]},o($VT,$VU,{44:298}),{2:$V0,5:173,7:5,8:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:$V2,20:$V3,26:$V4,32:$V5,39:$V6,40:$V7,43:$V8,45:[1,299],47:$V9,49:22,51:$Va,53:36,56:37,58:$Vb,59:$Vc,69:$Vd,80:$Ve,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,93:$Vo,97:$Vp,102:$Vq,107:$Vr,108:$Vs,109:$Vt,112:$Vu,113:$Vv},o($Vw,$Vn1,{94:300,95:$Vo1}),o($Vw,[2,115])],
defaultActions: {2:[2,1],4:[2,3],50:[2,2],131:[2,123],145:[2,100],152:[2,38],177:[2,48],209:[2,102],210:[2,95],218:[2,37],222:[2,39],236:[2,50],237:[2,97],238:[2,98],240:[2,28],241:[2,29],242:[2,30],245:[2,41],253:[2,104],254:[2,105],255:[2,106],256:[2,107],257:[2,108],258:[2,109],259:[2,110],276:[2,135],278:[2,138],280:[2,40],288:[2,137],293:[2,43]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const { Node } = require('./models/Node');
    const { NodeType } = require('./models/NodeType');
    const { AnalysisError, ErrorType } = require('./models/Error');
    const { Null, Number, String, Bool, Identifier } = require('./expressions/Primitive');
    const { BinaryOperation } = require('./expressions/Operation');
    const { CallFunction, Declaration } = require('./instructions/Sentence');
    let nodo_inicio = new Node('START');
    let errorList = [];
    nodo_inicio.id = 0; 
    Node.count = 1;
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* omitir espacios en blanco */
break;
case 1:/* omitir comentarios */
break;
case 2:return 43
break;
case 3:return 45
break;
case 4:return 32
break;
case 5:return 33
break;
case 6:return 40
break;
case 7:return 42
break;
case 8:return 46
break;
case 9:return 76
break;
case 10:return 35
break;
case 11:return 21
break;
case 12:return 77
break;
case 13:return 47
break;
case 14:return 51
break;
case 15:return 23
break;
case 16:return 24
break;
case 17:return 38
break;
case 18:return 25
break;
case 19:return 109
break;
case 20:return 29
break;
case 21:return 83
break;
case 22:return 84
break;
case 23:return 80
break;
case 24:return 88
break;
case 25:return 89
break;
case 26:return 93
break;
case 27:return 95
break;
case 28:return 97
break;
case 29:return 100
break;
case 30:return 101
break;
case 31:return 107
break;
case 32:return 108
break;
case 33:return 102
break;
case 34:return 105
break;
case 35:return 106
break;
case 36:return 19
break;
case 37:return 20
break;
case 38:return 39
break;
case 39:return 112
break;
case 40:return 113
break;
case 41:return 114
break;
case 42:return 64
break;
case 43:return 30
break;
case 44:return 66
break;
case 45:return 67
break;
case 46:return 65
break;
case 47:return 31
break;
case 48:return 68
break;
case 49:return 70
break;
case 50:return 71
break;
case 51:return 69
break;
case 52:return 48
break;
case 53:return 73
break;
case 54:return 72
break;
case 55:return 74
break;
case 56:return 58
break;
case 57:return 75
break;
case 58:return 59
break;
case 59:return 61
break;
case 60:return 62
break;
case 61:return 60
break;
case 62:return 63
break;
case 63: yy_.yytext = yy_.yytext.toLowerCase(); return 26;
break;
case 64:return 82
break;
case 65:return 81
break;
case 66: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); 
                        yy_.yytext = yy_.yytext.replace(new RegExp(/\\n/, 'g'), '\n');
                        yy_.yytext = yy_.yytext.replace(new RegExp(/\\t/, 'g'), '\t');
                        return 85; 
break;
case 67: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); 
                        yy_.yytext = yy_.yytext.replace(new RegExp(/\\n/, 'g'), '\n');
                        yy_.yytext = yy_.yytext.replace(new RegExp(/\\t/, 'g'), '\t');
                        return 86; 
break;
case 68: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); 
                        yy_.yytext = yy_.yytext.replace(new RegExp(/\\n/, 'g'), '\n');
                        yy_.yytext = yy_.yytext.replace(new RegExp(/\\t/, 'g'), '\t');
                        return 87; 
break;
case 69:return 6; // Token fin de archivo
break;
case 70: errorList.push(new AnalysisError('Carácter desconocido "'+yy_.yytext+'".', ErrorType.LEXICO, yy_.yylloc.first_line, yy_.yylloc.first_column));
                        console.error('Error Lexico: ' + yy_.yytext + ' en la linea ' + yy_.yylloc.first_line + ' y columna ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:\s+)/i,/^(?:((\/\*[\s\S]*?\*\/|\/\/.*)))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\()/i,/^(?:\))/i,/^(?:,)/i,/^(?:\.)/i,/^(?::)/i,/^(?:;)/i,/^(?:\?)/i,/^(?:let\b)/i,/^(?:const\b)/i,/^(?:string\b)/i,/^(?:boolean\b)/i,/^(?:void\b)/i,/^(?:number\b)/i,/^(?:type\b)/i,/^(?:Array\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:new\b)/i,/^(?:null\b)/i,/^(?:undefined\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:for\b)/i,/^(?:in\b)/i,/^(?:of\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:function\b)/i,/^(?:return\b)/i,/^(?:console\b)/i,/^(?:log\b)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:===)/i,/^(?:==)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:!=)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:=)/i,/^(?:-=)/i,/^(?:\+=)/i,/^(?:\+\+)/i,/^(?:\+)/i,/^(?:--)/i,/^(?:-)/i,/^(?:\/)/i,/^(?:\*\*)/i,/^(?:\*)/i,/^(?:%)/i,/^(?:((([a-zA-Z_])[a-zA-Z0-9_]*)))/i,/^(?:(((([0-9]+))(\.(([0-9]+))))))/i,/^(?:(((([0-9]+)))))/i,/^(?:(((("))((?:\\(("))|(?:(?!(("))).))*)((")))))/i,/^(?:(((('))((?:\\(('))|(?:(?!(('))).))*)((')))))/i,/^(?:((((`))((?:\\((`))|(?:(?!((`))).))*)((`)))))/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}